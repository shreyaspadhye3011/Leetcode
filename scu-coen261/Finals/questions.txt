This project consists of a bunch of problems, some larger, some smaller, with a score for each problem. You are supposed to get 100 points (but you can do more, of course). Each answer is a separate chunk of code, executable on codeacademy, and is submitted as a link to your code ("share" is the way to produce a link to the code).

Another kind of problems consists of creating a pull request for this github repo: https://github.com/vpatryshev/sicpjs_exercises (Links to an external site.) and sending it to me.

1. 30pts. For slide 6 of https://tinyurl.com/coen261-6, (Links to an external site.) implement binary trees using curried form of code (const f = a => b => ...) and handling the cases of nulls. Either a pull request or just a link to code academy.

2. 10pts. For slide 8 of https://tinyurl.com/coen261-6, (Links to an external site.) fix a bug in `insert_sl`. Provide a link to codeacademy.

3. 20pts. On slide 15 of https://tinyurl.com/coen261-7 (Links to an external site.), scan "left to right" is defined. Define scan "right to left". Provide a link to codeacademy.

4. 25pts. On slide 16 of https://tinyurl.com/coen261-7 (Links to an external site.), `foldl` is defined. Define `foldr`. Provide a link to codeacademy.

5. 75 pts. On slide 17 of https://tinyurl.com/coen261-7 (Links to an external site.), `concatenate` function is described. Implement. Send as a pull request. Make sure you have good test coverage.

6. 60 pts. On slide 20 of https://tinyurl.com/coen261-7 (Links to an external site.), `find by index` is described. Implement. Send as a pull request. Make sure you have good test coverage.

6. 70 pts. On slide 22 of https://tinyurl.com/coen261-7 (Links to an external site.), `find by measure` is described. Implement. Send as a pull request. Make sure you have good test coverage. Make sure that you have a reasonable definition of `Measure`.

7. 100 pts. On slide 23 of https://tinyurl.com/coen261-7 (Links to an external site.), `split and insert` are described. Implement. Send as a pull request. Make sure you have good test coverage. You can do just `split`, it is 75 points.

8. 60 pts. On slide 20 of https://tinyurl.com/coen261-7 (Links to an external site.), `find by index` is described. Implement. Send as a pull request. Make sure you have good test coverage.

9. 15 pts. Implement a stream that produces double factorials (Links to an external site.). Provide a link to codeacademy.

10. 20 pts. If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000. Provide a link to codeacademy.

11. 25 pts. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
Provide a link to codeacademy.

12. 30 pts. The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143? Provide a link to codeacademy.

13. 15 pts. 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is divisible by all of the numbers from 1 to 20? Provide a link to codeacademy.

14. 15 pts. The sum of the squares of the first ten natural numbers is12+22+...+102=385.
The square of the sum of the first ten natural numbers is (1+2+...+10)2=552=3025.
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025=385=2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
Provide a link to codeacademy.